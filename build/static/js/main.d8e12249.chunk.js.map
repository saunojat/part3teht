{"version":3,"sources":["App.js","index.js"],"names":["App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newKeyword","setNewKeyword","useEffect","console","log","axios","get","then","response","data","length","addContact","event","preventDefault","nameObject","name","number","map","person","indexOf","alert","post","concat","personsToShow","filter","includes","onSubmit","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gKA+HeA,EA3HH,WAKZ,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAoCN,mBAAS,IAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAGAC,qBAAU,WACVC,QAAQC,IAAI,UACZC,IACCC,IAAI,qCACJC,MAAK,SAAAC,GACNL,QAAQC,IAAI,qBACZT,EAAWa,EAASC,WAEjB,IACHN,QAAQC,IAAI,SAAUV,EAAQgB,OAAQ,SAuBtC,IAAMC,EAAa,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAa,CACnBC,KAAMnB,EACNoB,OAAQlB,GAURK,QAAQC,IAAI,qCAAsCR,GAC9CF,EAAQuB,KAAI,SAAAC,GAAM,OAAIA,EAAOH,QAAMI,QAAQvB,IAAY,GAE3DO,QAAQC,IAAI,sBACZgB,MAAMxB,EAAU,mCAEhBS,IACCgB,KAAK,oCAAqCP,GAC1CP,MAAK,SAAAC,GACNL,QAAQC,IAAI,uBAAwBI,GACpCb,EAAWD,EAAQ4B,OAAOd,EAASC,OACnCZ,EAAW,IACXE,EAAa,QAsBPwB,EAAgB7B,EAAQ8B,QAAO,SAAAN,GACrC,OAAOA,EAAOH,KAAKU,SAASzB,MAI5B,OAFAG,QAAQC,IAAI,8BAA+BmB,EAAe,oBAAkBvB,GAG5E,gCACA,2CACA,sBAAM0B,SAAUf,EAAhB,SACA,uDACoB,uBAAOgB,MAAO3B,EAAY4B,SAfnB,SAAChB,GAC5BT,QAAQC,IAAIQ,EAAMiB,OAAOF,OACzB1B,EAAcW,EAAMiB,OAAOF,eAgB3B,6CACA,sCACA,sBAAMD,SAAUf,EAAhB,SACA,uBAAOgB,MAAO/B,EACdgC,SAhCyB,SAAChB,GAC1BT,QAAQC,IAAIQ,EAAMiB,OAAOF,OACzB9B,EAAWe,EAAMiB,OAAOF,YAgCxB,wCACA,uBAAMD,SAAUf,EAAhB,UACA,uBAAOgB,MAAO7B,EACd8B,SAhC2B,SAAChB,GAC5BT,QAAQC,IAAIQ,EAAMiB,OAAOF,OACzB5B,EAAaa,EAAMiB,OAAOF,UA+B1B,4BAAG,wBAAQG,KAAK,SAAb,8BAGFP,EAAcN,KAAI,SAAAC,GAAM,OAAI,6BAAI,8BAAIA,EAAOH,KAAX,IAAkBG,EAAOF,mBCnH1De,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d8e12249.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\nconst App = () => {\n// esim. useState = se mitä tekstikentässä näkyy alussa. \n//newKeyword = se mitä tekstikentässä näkyy lopussa (kun painaa enteriä).\n//setNewKeyword = se mitä tekstikentässä lukee milloinkin.\n// esim. useState([])\nconst [persons, setPersons] = useState([]) \nconst [newName, setNewName] = useState('')\nconst [newNumber, setNewNumber] = useState('')\nconst [newKeyword, setNewKeyword] = useState('')\n// const [showAll, setShowAll] = useState(true)\n\nuseEffect(() => { \nconsole.log('effect') \naxios \n.get('http://localhost:3001/api/persons') \n.then(response => { \nconsole.log('promise fulfilled') \nsetPersons(response.data) \n}) \n}, []) \nconsole.log('render', persons.length, 'notes')\n\n// const Person = ({ person, toggleImportance }) => {\n// const label = person.important\n// ? 'make not important' : 'make important'\n// return (\n// <li>\n// {person.name} \n// <button onClick={toggleImportance}>{label}</button>\n// </li>\n// )\n// }\n\n// const toggleImportanceOf = (id) => {\n// console.log('importance of ' + id + ' needs to be toggled')\n// const url = `http://localhost:3002/persons/${id}`\n// const person = persons.find(n => n.id === id)\n// const changedPerson = { ...person, important: !person.important }\n// axios.put(url, changedPerson).then(response => {\n// setPersons(persons.map(note => person.id !== id ? person : response.data))\n// })\n// }\n\nconst addContact = (event) => {\nevent.preventDefault()\nconst nameObject = {\nname: newName, //<--Katso että vaihdat uuden listan elementin mukaiseksi!!!\nnumber: newNumber\n}\n\n// persons.map((person) => person.name).indexOf(newName)) === -1) \n// console.log(\"the text gets added\")\n//persons ja personsToShow on yksi ja sama persons-lista! \n// Vai onko niin että personsToShow muuttuu? Kyllä vain, \n// mutta se tapahtuisi vasta kun newKeywordilla on jokin arvo! \n// Kun filter-input on \"\", niin persons = personsToShow.\n\nconsole.log('newName:n arvo ennen if-lausetta: ', newName)\nif (persons.map(person => person.name).indexOf(newName) > -1)\n{\nconsole.log(\"alternative occurs\")\nalert(newName + ' is already added to phonebook')\n} else {\naxios\n.post('http://localhost:3001/api/persons', nameObject)\n.then(response => {\nconsole.log('palvelimen vastaus: ', response)\nsetPersons(persons.concat(response.data)) \nsetNewName('')\nsetNewNumber('')\n//setPersons poistaa edellisen ja lisää uuden taulukon. \n}) \n}\n\n}\n\nconst handleNameChange = (event) => {\nconsole.log(event.target.value) \nsetNewName(event.target.value) \n}\n\nconst handleNumberChange = (event) => {\nconsole.log(event.target.value) \nsetNewNumber(event.target.value) \n}\n\nconst handleFilterChange = (event) => {\nconsole.log(event.target.value)\nsetNewKeyword(event.target.value)\n}\n\nconst personsToShow = persons.filter(person => {\nreturn person.name.includes(newKeyword) \n})\nconsole.log('persons to show palauttaa: ', personsToShow, 'newKeyword:llä', newKeyword)\n\nreturn (\n<div>\n<h1>Phonebook</h1>\n<form onSubmit={addContact}>\n<div>\nSearch by keywords: <input value={newKeyword} onChange={handleFilterChange}/>\n</div>\n</form>\n<h2>Add contact</h2>\n<h3>Name</h3>\n<form onSubmit={addContact}>\n<input value={newName}\nonChange={handleNameChange} />\n</form>\n<h3>Number</h3>\n<form onSubmit={addContact}>\n<input value={newNumber}\nonChange={handleNumberChange} />\n<p><button type=\"submit\">Add contact</button></p>\n\n</form>\n{personsToShow.map(person => <li><p>{person.name} {person.number}</p></li>)}\n\n</div>\n) \n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}