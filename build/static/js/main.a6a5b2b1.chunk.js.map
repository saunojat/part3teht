{"version":3,"sources":["App.js","index.js"],"names":["App","useState","persons","setPersons","newName","setNewName","newKeyword","setNewKeyword","useEffect","console","log","axios","get","then","response","data","length","addName","event","preventDefault","nameObject","name","map","person","indexOf","alert","post","concat","personsToShow","filter","includes","onSubmit","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"gKAwHeA,EApHH,WAKZ,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAGAC,qBAAU,WACVC,QAAQC,IAAI,UACZC,IACCC,IAAI,qCACJC,MAAK,SAAAC,GACNL,QAAQC,IAAI,qBACZP,EAAWW,EAASC,WAEjB,IACHN,QAAQC,IAAI,SAAUR,EAAQc,OAAQ,SAuBtC,IAAMC,EAAU,SAACC,GACjBA,EAAMC,iBACN,IAAMC,EAAa,CACnBC,KAAMjB,GAUNK,QAAQC,IAAI,qCAAsCN,GAC9CF,EAAQoB,KAAI,SAAAC,GAAM,OAAIA,EAAOF,QAAMG,QAAQpB,IAAY,GAE3DK,QAAQC,IAAI,sBACZe,MAAMrB,EAAU,mCAEhBO,IACCe,KAAK,oCAAqCN,GAC1CP,MAAK,SAAAC,GACNL,QAAQC,IAAI,uBAAwBI,GACpCX,EAAWD,EAAQyB,OAAOb,EAASC,OACnCV,EAAW,QAiBLuB,EAAgB1B,EAAQ2B,QAAO,SAAAN,GACrC,OAAOA,EAAOF,KAAKS,SAASxB,MAK5B,OAFAG,QAAQC,IAAI,8BAA+BkB,EAAe,oBAAkBtB,GAG5E,gCACA,2CACA,sBAAMyB,SAAUd,EAAhB,SACA,gDACa,uBAAOe,MAAO1B,EAAY2B,SAhBZ,SAACf,GAC5BT,QAAQC,IAAIQ,EAAMgB,OAAOF,OACzBzB,EAAcW,EAAMgB,OAAOF,eAiB3B,yCACA,sBAAMD,SAAUd,EAAhB,SACA,uBAAOe,MAAO5B,EACd6B,SA3ByB,SAACf,GAC1BT,QAAQC,IAAIQ,EAAMgB,OAAOF,OACzB3B,EAAWa,EAAMgB,OAAOF,YA6BvBJ,EAAcN,KAAI,SAAAC,GAAM,OAAI,6BAAKA,EAAOF,cCtGzCc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a6a5b2b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\nconst App = () => {\n// esim. useState = se mitä tekstikentässä näkyy alussa. \n//newKeyword = se mitä tekstikentässä näkyy lopussa (kun painaa enteriä).\n//setNewKeyword = se mitä tekstikentässä lukee milloinkin.\n// esim. useState([])\nconst [persons, setPersons] = useState([]) \nconst [newName, setNewName] = useState('')\nconst [newKeyword, setNewKeyword] = useState('')\n// const [showAll, setShowAll] = useState(true)\n\nuseEffect(() => { \nconsole.log('effect') \naxios \n.get('http://localhost:3001/api/persons') \n.then(response => { \nconsole.log('promise fulfilled') \nsetPersons(response.data) \n}) \n}, []) \nconsole.log('render', persons.length, 'notes')\n\n// const Person = ({ person, toggleImportance }) => {\n// const label = person.important\n// ? 'make not important' : 'make important'\n// return (\n// <li>\n// {person.name} \n// <button onClick={toggleImportance}>{label}</button>\n// </li>\n// )\n// }\n\n// const toggleImportanceOf = (id) => {\n// console.log('importance of ' + id + ' needs to be toggled')\n// const url = `http://localhost:3002/persons/${id}`\n// const person = persons.find(n => n.id === id)\n// const changedPerson = { ...person, important: !person.important }\n// axios.put(url, changedPerson).then(response => {\n// setPersons(persons.map(note => person.id !== id ? person : response.data))\n// })\n// }\n\nconst addName = (event) => {\nevent.preventDefault()\nconst nameObject = {\nname: newName //<--Katso että vaihdat uuden listan elementin mukaiseksi!!!\n}\n\n// persons.map((person) => person.name).indexOf(newName)) === -1) \n// console.log(\"the text gets added\")\n//persons ja personsToShow on yksi ja sama persons-lista! \n// Vai onko niin että personsToShow muuttuu? Kyllä vain, \n// mutta se tapahtuisi vasta kun newKeywordilla on jokin arvo! \n// Kun filter-input on \"\", niin persons = personsToShow.\n\nconsole.log('newName:n arvo ennen if-lausetta: ', newName)\nif (persons.map(person => person.name).indexOf(newName) > -1)\n{\nconsole.log(\"alternative occurs\")\nalert(newName + ' is already added to phonebook')\n} else {\naxios\n.post('http://localhost:3001/api/persons', nameObject)\n.then(response => {\nconsole.log('palvelimen vastaus: ', response)\nsetPersons(persons.concat(response.data)) \nsetNewName('')\n//setPersons poistaa edellisen ja lisää uuden taulukon. \n}) \n}\n\n}\n\nconst handleNameChange = (event) => {\nconsole.log(event.target.value) \nsetNewName(event.target.value) \n}\n\nconst handleFilterChange = (event) => {\nconsole.log(event.target.value)\nsetNewKeyword(event.target.value)\n}\n\nconst personsToShow = persons.filter(person => {\nreturn person.name.includes(newKeyword) // listassa näytettävässä db.jsonin olion alkiossa täytyy \n// esiintyä kaikki ne merkit siinä järjestyksessä, miten ne esiintyvät newKeyword:ssä filter-kentässä. \n})\nconsole.log('persons to show palauttaa: ', personsToShow, 'newKeyword:llä', newKeyword)\n\nreturn (\n<div>\n<h2>Phonebook</h2>\n<form onSubmit={addName}>\n<div>\nfilter with: <input value={newKeyword} onChange={handleFilterChange}/>\n</div>\n</form>\n<h2>Numbers</h2>\n<form onSubmit={addName}>\n<input value={newName}\nonChange={handleNameChange} /> \n{/* <button type=\"submit\" onClick={() => setShowAll(!showAll)}>\nshow {showAll ? 'important' : 'all' }</button> */}\n</form>\n{personsToShow.map(person => <li>{person.name}</li>)}\n{/* {persons.map(person => \n<Person\nkey={person.id}\nperson={person.name} \ntoggleImportance={() => toggleImportanceOf(person.id)}/>)} */}\n</div>\n) // Katso et addXxx (oletusarvoisen viestinlähetyksen estäjäfunktio) on mukana, heti lomakkeen alussa form-tagissa, koska muuten lähetettävä viesti ei mene mihinkään! (oletusarvoinen lähetys kai blokkaa lähetyksen?)\n// Katso myös että tapahtumankäsittelijä handleXxxChange on input-tagissa, koska muuten ei addXxx esiintyessä voi kirjoittaa mitään! (addXxx estää oletusarvoisen lähetyksen kirjoitustoiminnan, johon handleXxxChange tuo manuaalisen kirjoitustoiminnan tilalle...)\n// On myös tärkeätä että {taulukko.map(lista => {lista.elementti})} on kahden aaltosulun sisällä (yksi koko map-metodin ympärillä, toinen kutsuttavan olion elementin ympärillä)\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}